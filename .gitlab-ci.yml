# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- build_test
- test
- build
- package
- deploy

variables:
  APPLICATION_PATH: "."
  UNIT_TEST_IMAGE: "$CI_REGISTRY_IMAGE:test"
  APP_VERSION: $CI_PIPELINE_IID

.Build Docs:
  stage: build
  image: $UNIT_TEST_IMAGE
  before_script:
    - composer install
  script:
    # - phpdoc -d src -t docs/src/api --template="/md/themes/markdown"
    - bin/hztool --scan src --title "Hazaar API Documentation" doc docs/src/api
  artifacts:
    paths:
      - docs/src/api

.Build Image:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "ENVIRONMENT - $CI_ENVIRONMENT_NAME"
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - apk add npm git
    - export NODE_OPTIONS="--max-old-space-size=4096"
  script:
    - cd docs
    - npm install
    - npm run docs:build
    - docker build --pull --rm --target $CI_ENVIRONMENT_NAME -f "Dockerfile" -t $CI_REGISTRY_IMAGE:docs -t $CI_REGISTRY_IMAGE:docs-$APP_VERSION -t $CI_REGISTRY_IMAGE:docs-$CI_ENVIRONMENT_NAME --build-arg CI_ENVIRONMENT_NAME .
    - docker push --all-tags $CI_REGISTRY_IMAGE

.Deploy Image:
  stage: deploy
  image:    
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config get-contexts
    - kubectl config use-context $GITLAB_AGENT_CONTEXT
    - kubectl config set-context --current --namespace=hazaar
    - kubectl get pods
    - kubectl apply -f docs/deploy/k8s/hazaar-docs-$CI_ENVIRONMENT_NAME.yaml
    - kubectl set image $K8_DEPLOYMENT_NAME $K8_CONTAINER_NAME=$CI_REGISTRY_IMAGE:docs-$APP_VERSION

Build Test Image:
  stage: build_test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - until docker info; do sleep 1; done
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
      $CI_REGISTRY
  script:
    - docker build --network host --pull --rm -f "Dockerfile" -t $UNIT_TEST_IMAGE .
    - docker push --all-tags $CI_REGISTRY_IMAGE
  only:
    refs:
    - master
    changes:
    - Dockerfile

Code Quality:
  stage: test
  image: $UNIT_TEST_IMAGE
  variables:
    INPUT_PATH: "./src"
    INPUT_OPTIONS: "-c .phplint.yml"
  before_script:
    - composer install
  script: 
    - vendor/bin/phplint -c .phplint.yml
  artifacts:
    when: always
    reports:
      junit: phplint-test-results.xml

Static Analysis:
  stage: test
  image: $UNIT_TEST_IMAGE
  before_script:
    - composer install
  script:
    - vendor/bin/phpstan analyse -vvv -c phpstan.neon --error-format=junit > phpstan-test-results.xml
  artifacts:
    when: always
    reports:
      junit: phpstan-test-results.xml

Unit Testing:
  stage: test
  image: $UNIT_TEST_IMAGE
  variables:
    APPLICATION_PATH: tests/application
  before_script:
    - composer install
  script:
    - vendor/bin/phpunit
  artifacts:
    when: always
    reports:
      junit: phpunit-test-results.xml

Build Testing Documentation:
  extends: .Build Docs
  environment: testing
  rules:
    - if: $CI_MERGE_REQUEST_ID

Build Testing Image:
  extends: .Build Image
  environment: testing
  needs: 
    - Build Testing Documentation
  rules:
    - if: $CI_MERGE_REQUEST_ID

Build Production Documentation:
  extends: .Build Docs
  environment: production
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

Build Production Image:
  extends: .Build Image
  environment: production
  needs: 
    - Build Production Documentation
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

Deploy Documentation to Production:
  extends: .Deploy Image
  environment: production
  needs: 
    - Build Production Image
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

