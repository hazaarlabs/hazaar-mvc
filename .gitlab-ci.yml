stages:
- build_test
- test
- build
- package
- deploy
variables:
  APPLICATION_ENV: "gitlab"
  APPLICATION_PATH: "."
  UNIT_TEST_IMAGE: "$CI_REGISTRY_IMAGE:test"
  APP_VERSION: "$CI_PIPELINE_IID"
".Build Docs":
  stage: build
  image: "$UNIT_TEST_IMAGE"
  before_script:
  - composer install
  script:
  - mkdir -p docs/src/api
  - bin/hazaar doc compile --scan src --title "API Reference" docs/src/api
  - bin/hazaar doc index --scan src docs/src/.vuepress/api_sidebar.js
  artifacts:
    paths:
    - docs/src/api
    - docs/src/.vuepress/api_sidebar.js
".Build Image":
  stage: package
  image: docker:latest
  services:
  - docker:dind
  before_script:
  - echo "ENVIRONMENT - $CI_ENVIRONMENT_NAME"
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    $CI_REGISTRY
  - apk add npm git
  - export NODE_OPTIONS="--max-old-space-size=4096"
  script:
  - cd docs
  - npm install
  - npm run docs:build
  - docker build --pull --rm --target $CI_ENVIRONMENT_NAME -f "Dockerfile"
    -t $CI_REGISTRY_IMAGE:docs-$APP_VERSION -t $CI_REGISTRY_IMAGE:docs-$CI_ENVIRONMENT_NAME
    --build-arg CI_ENVIRONMENT_NAME .
  - docker push --all-tags $CI_REGISTRY_IMAGE
".Deploy Image":
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint:
    - ''
  script:
  - kubectl config get-contexts
  - kubectl config use-context $GITLAB_AGENT_CONTEXT
  - kubectl config set-context --current --namespace=hazaar
  - kubectl get pods
  - kubectl apply -f docs/deploy/k8s/hazaar-docs-$CI_ENVIRONMENT_NAME.yaml
  - kubectl set image $K8_DEPLOYMENT_NAME $K8_CONTAINER_NAME=$CI_REGISTRY_IMAGE:docs-$APP_VERSION
Build Unit Test Image:
  stage: build_test
  image: docker:latest
  services:
  - docker:dind
  before_script:
  - until docker info; do sleep 1; done
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    $CI_REGISTRY
  script:
  - docker build --network host --pull --rm -f "Dockerfile" -t $UNIT_TEST_IMAGE .
  - docker push --all-tags $CI_REGISTRY_IMAGE
  rules:
    - changes:
        - Dockerfile
      if: $CI_PIPELINE_SOURCE != "schedule"
Code Quality:
  stage: test
  image: "$UNIT_TEST_IMAGE"
  variables:
    INPUT_PATH: "./src"
    INPUT_OPTIONS: "-c .phplint.yml"
  before_script:
  - composer install
  script:
  - vendor/bin/phplint -c .phplint.yml
  artifacts:
    when: always
    reports:
      junit: phplint-test-results.xml
  rules:
  - if: $CI_PIPELINE_SOURCE != "schedule"
Static Analysis:
  stage: test
  image: "$UNIT_TEST_IMAGE"
  before_script:
  - composer install
  script:
  - vendor/bin/phpstan analyse -vvv -c phpstan.neon --error-format=junit > phpstan-test-results.xml
  artifacts:
    when: always
    reports:
      junit: phpstan-test-results.xml
  rules:
  - if: $CI_PIPELINE_SOURCE != "schedule"
Unit Testing:
  stage: test
  image:
    name: "$UNIT_TEST_IMAGE"
    pull_policy: always
  services:
  - postgres:15
  variables:
    APPLICATION_PATH: tests/app
    POSTGRES_DB: hazaar_framework
    POSTGRES_USER: phpunit
    POSTGRES_PASSWORD: phpunit12345
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - composer install
    - envsubst < tests/app/configs/imports.json.build > tests/app/configs/imports.json 
    - bin/warlock run -d --config tests/app/configs/warlock.json
    - bin/warlock agent run -d -p tests/app
    - sleep 5
    - dave --config .devcontainer/dave.yaml &
  script:
  - vendor/bin/phpunit --debug
  artifacts:
    reports:
      junit: phpunit-test-results.xml
Build Testing Documentation:
  extends: ".Build Docs"
  environment: testing
  rules:
  - if: $CI_COMMIT_BRANCH == "develop"
Build Production Documentation:
  extends: ".Build Docs"
  environment: production
  rules:
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"
Build Testing Image:
  extends: ".Build Image"
  environment: testing
  needs:
  - Build Testing Documentation
  rules:
  - if: $CI_COMMIT_BRANCH == "develop"
Build Production Image:
  extends: ".Build Image"
  environment: production
  needs:
  - Build Production Documentation
  rules:
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"
Deploy Documentation to Testing:
  extends: ".Deploy Image"
  environment: testing
  needs:
  - Build Testing Image
  rules:
  - if: $CI_COMMIT_BRANCH == "develop"
Deploy Documentation to Production:
  extends: ".Deploy Image"
  environment: production
  needs:
  - Build Production Image
  rules:
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"
