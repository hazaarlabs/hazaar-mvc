<?php

declare(strict_types=1);

/**
 * @file        Controller/Action.php
 *
 * @author      Jamie Carl <jamie@hazaar.io>
 * @copyright   Copyright (c) 2012 Jamie Carl (http://www.hazaar.io)
 */

namespace Hazaar\Controller;

use Hazaar\Application;
use Hazaar\Application\Request;
use Hazaar\Application\Request\HTTP;
use Hazaar\Controller;
use Hazaar\Controller\Action\ViewRenderer;
use Hazaar\View;

/**
 * Abstract controller action class.
 *
 * This controller handles actions and responses using views
 */
abstract class Action extends Basic
{
    public ViewRenderer $view;

    /**
     * @var array<mixed>
     */
    protected array $methods = [];

    public function __construct(Application $application, ?string $name = null)
    {
        parent::__construct($application, $name);
        $this->view = new ViewRenderer();
    }

    /**
     * Initializes the controller action with the given request.
     *
     * This method checks if the request is an instance of HTTP, is not an
     * XMLHttpRequest, the application is not null, the response type is 'html',
     * and the application configuration has a 'layout' setting. If all these
     * conditions are met, it sets the view layout to the specified layout in the
     * application configuration.
     *
     * @param Request $request the request object to initialize the action with
     *
     * @return null|Response the response from the parent initialize method, or null
     */
    public function initialize(Request $request): ?Response
    {
        if ($request instanceof HTTP
            && false === $request->isXmlHttpRequest()
            && null !== $this->application
            && 'html' === $this->application->getResponseType()
            && $this->application->config['app']->has('layout')) {
            $this->view->layout($this->application->config['app']['layout']);
        }

        return parent::initialize($request);
    }

    /**
     * Registers a new method with the given name and callback.
     *
     * @param string   $name     the name of the method to register
     * @param callable $callback the callback function to associate with the method
     *
     * @return bool returns true if the method was successfully registered
     *
     * @throws Exception\MethodExists if a method with the given name already exists
     */
    public function registerMethod(string $name, callable $callback): bool
    {
        if (array_key_exists($name, $this->methods)) {
            throw new Exception\MethodExists($name);
        }
        $this->methods[$name] = $callback;

        return true;
    }

    /**
     * Executes the specified action and returns the response.
     *
     * @param string       $actionName      the name of the action to execute
     * @param array<mixed> $actionArgs      the arguments to pass to the action
     * @param bool         $namedActionArgs whether the action arguments are named
     *
     * @return Response the response generated by the action
     *
     * @throws Exception\ResponseInvalid if the response is invalid
     */
    public function runAction(string $actionName, array $actionArgs = [], bool $namedActionArgs = false): Response
    {
        try {
            $response = parent::runAction($actionName, $actionArgs, $namedActionArgs);
        } catch (Exception\ResponseInvalid $e) {
            $response = null;
        }
        if (null === $response) {
            $response = new Response\HTML();
            $this->view->exec($response);
        }

        return $response;
    }

    /**
     * Loads a view.
     *
     * @param string $view the name of the view to load
     */
    protected function view(string $view): void
    {
        $this->view->view($view);
    }

    /**
     * Sets the layout view for the current controller.
     *
     * This method sets the layout view that will be used to render the response.
     *
     * @param string $view the name of the layout view to be used
     */
    protected function layout(string $view): void
    {
        $this->view->layout($view);
    }
}
